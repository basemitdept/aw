---
- name: Create Google Cloud VM Instance using Service Account JSON and API
  hosts: localhost
  ignore_errors: true
  gather_facts: no
  vars: 
    gcp_project_id: "terraform-426822"
    
  tasks:
    

    - name: Obtain OAuth token from service account JSON file
      ansible.builtin.command:
        cmd: >
          gcloud auth application-default print-access-token
      #  environment:
      #    GOOGLE_APPLICATION_CREDENTIALS: "{{ gcpp }}"
      register: oauth_token_response
      changed_when: false

    - name: Create the VM instance on Google Cloud
      ansible.builtin.uri:
        url: "https://compute.googleapis.com/compute/v1/projects/{{ gcp_project_id }}/zones/us-central1-b/instances"
        method: POST
        headers:
          Authorization: "Bearer {{ oauth_token_response.stdout }}"
          Content-Type: "application/json"
        body:
          canIpForward: false
          confidentialInstanceConfig:
            enableConfidentialCompute: false
          deletionProtection: false
          description: ""
          disks:
            - autoDelete: true
              boot: true
              deviceName: "{{item.name}}"
              diskEncryptionKey: {}
              initializeParams:
                diskSizeGb: "{{item.size}}"
                diskType: "projects/{{ gcp_project_id }}/zones/us-central1-b/diskTypes/pd-ssd"
                sourceImage: "projects/debian-cloud/global/images/debian-12-bookworm-v20241112"
                resourcePolicies:
                  - "projects/{{ gcp_project_id }}/regions/us-central1/resourcePolicies/default-schedule-1"
              mode: "READ_WRITE"
              type: "PERSISTENT"
          displayDevice:
            enableDisplay: false
          guestAccelerators: []
          instanceEncryptionKey: {}
          keyRevocationActionType: "NONE"
          labels:
            goog-ec-src: "vm_add-rest"
          machineType: "projects/{{ gcp_project_id }}/zones/us-central1-b/machineTypes/e2-medium"
          metadata:
            items: []
          name: "{{item.name}}"
          networkInterfaces:
            - nicType: "VIRTIO_NET"
              stackType: "IPV4_ONLY"
              subnetwork: "projects/{{ gcp_project_id }}/regions/us-central1/subnetworks/default"
          params:
            resourceManagerTags: {}
          reservationAffinity:
            consumeReservationType: "ANY_RESERVATION"
          scheduling:
            automaticRestart: true
            onHostMaintenance: "MIGRATE"
            provisioningModel: "STANDARD"
          serviceAccounts:
            - email: "888835889176-compute@developer.gserviceaccount.com"
              scopes:
                - "https://www.googleapis.com/auth/devstorage.read_only"
                - "https://www.googleapis.com/auth/logging.write"
                - "https://www.googleapis.com/auth/monitoring.write"
                - "https://www.googleapis.com/auth/service.management.readonly"
                - "https://www.googleapis.com/auth/servicecontrol"
                - "https://www.googleapis.com/auth/trace.append"
          shieldedInstanceConfig:
            enableIntegrityMonitoring: true
            enableSecureBoot: false
            enableVtpm: true
          tags:
            items: []
          zone: "projects/{{ gcp_project_id }}/zones/us-central1-b"
        body_format: json
        return_content: yes
      register: create_instance_response
      with_items: "{{vm_list}}"

    - name: Output the response from creating the instance
      debug:
        var: create_instance_response
      
    - name: Save the count of the array in a variable
      set_fact:
        array_count: "{{ vm_list | length }}"

    

    - name: state
      set_stats: 
        data: 
          vm{{create_instance_response.results[item].item.name}}: "{{create_instance_response.results[item].content}}"
      loop: "{{ range(0, array_count | int ) | list }}"
      with_items: vm_list
          
   

